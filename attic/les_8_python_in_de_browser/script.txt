Python is heel populair in wetenschap en techniek. Voor dat soort toepassingen zijn er veel gratis programmabibliotheken, zoals numpy voor lineaire algebra, scipy voor technisch-wetenschappelijk rekenwerk, tensorflow voor machine learning en vispy voor real-time visualisatie. Zulke bibliotheken zijn meestal geschreven in C++ in plaats van een geinterpreteerde taal zoals Python of JavaScript, en dat maakt ze op zichzelf al een factor 10 tot 100 sneller. Daarnaast draait de rekencode uit zulke bibliotheken vaak ook op de grafische kaart, waarbij massief parallelle verwerking nog eens voor een vergelijkbare versnelling zorgt. Al met al een totale versnelling met een factor 100 tot 10.000, waarbij ook nog eens efficient met geheugen wordt omgesprongen en directe toegang tot de onderliggende hardware mogelijk is. Dit alles draaiend op alle bekende besturingssystemen.

1 belangrijk gebied is in het bovenstaande onbelicht gebleven: browsertoepassingen. Wat nu als je een prachtig server-programma voor medische research hebt geschreven in Python en je wilt het een web user interface geven, zodat collega onderzoekers uit andere landen er ook mee kunnen werken via de browser. Traditioneel ondersteunen browsers alleen de taal JavaScript en oorspronkelijk hadden ontwikkelaars dan ook geen keus. Voor iemand met een hamer lijkt alles op een spijker, en JavaScript wordt dan ook te pas en te onpas toegepast, zelfs op de server. Iedereen heeft recht op z'n eigen mening, maar ik wil jullie de mijne niet onthouden: JavaScript is een organisch gegroeid rommeltje, dat slechte programmeergewoonten in de hand werkt en efficiente server programma's in de weg staat. Ooit begonnen als een taal om wat animatie toe te voegen aan saaie websites, zijn er voortdurend nieuwe features aangeplakt, waardoor een enorme wildgroei is onstaan, zonder overkoepelend concept.

Na JavaScript een aantal jaren intensief gebruikt te hebben voor web user interfaces van technische projecten had ik er genoeg van en besloot ik er doormiddel van het open source project Transcrypt voor te zorgen dat Python op voor mijn klanten acceptabele wijze in de browser draait. Op die manier kan het front-end (het deel dat in de browser draait) in dezelfde taal kan worden geschreven als het back-end (het deel dat op de server draait: Python). Er zijn grofweg 3 manieren om dat voor elkaar te krijgen.

Manier 1 is een Python interpreter te schrijven in JavaScript. Deze wordt vele honderden kilobytes groot en moet, afgezien van caching, voor elke pagina worden gedownload. Daarnaast is de executiesnelheid van de uiteindelijke code aanzienlijk trager dan die van JavaScript zelf. Het voordeel is eenvoud: Er kan zonder verder nadenken een Python script in een webpagina worden opgenomen. Daarnaast kan verspreiding van de interpreter plaats vinden zoals dat in de JavaScript wereld gebruikelijk is. JavaScript programmeurs kunnen hierdoor heel laagdrempelig kennis maken met Python, maar echt snel zullen de uiteindelijke pagina's niet worden. Toch is deze methode populair vanwege de eenvoud. Voor mijn doel, het maken van snelle websites in Python met vrij gebruik van willekeurige JavaScript libraries, was hij echter niet geschikt.

Manier 2 is een Python compiler te schrijven, die eenmalig equivalente JavaScript code genereert. Deze methode geeft erg weinig overhead per webpagina, slechts ca 50kB, veel minder dan de meeste JavaScript libraries. De verkregen code loopt even snel als JavaScript, het IS namelijk gewoon JavaScript en de optimizer in vele browsers kan naar hartelust z'n werk doen. Gebruik van uiteenlopende JavaScript libraries is zonder enige aanpassing mogelijk. Het nadeel van gebruik van een compiler is dat een ontwikkelaar van tevoren moet nadenken in plaats van code te breien via trial en error. Het resultaat is echter dat uitgebreide, goed gestructureerde, snelle en compacte applicaties kunnen worden gemaakt. Dit is met name interessant voor websites die verder gaan dan een on-line invuloefening met een submit knop.

Manier 3 is de originele Python interpreter in de browser te laten draaien door hem om te zetten naar WebAssembly. WebAssembly is een op machinetaal lijkende subset van JavaScript die redelijk efficiente verwerking mogelijk maakt. De interpreter zelf is echter vele megabytes groot en moet, ook weer afgezien van caching, voor elke pagina opnieuw worden gedownload. Dit leidt per pagina tot een wachttijd van tientallen seconden tot meerdere minuten. Bovendien wordt in de originele Python interpreter geen gebruik gemaakt de JavaScript optimizer, het is immers een totaal andere interpreter.

Manier 1, omzetting on the fly, is laagdrempelig en zeker geschikt voor webpagina's met een beetje code, maar de overhead maakt dat ik deze methode als minder aantrekkelijk ervaar. Immers de gebruiker kijkt maar naar 1 ding: snelheid. Als 't allemaal te lang duurt klikt zij weg, iets wat mijn klanten terecht niet zouden accepteren.

Manier 3, de originele interpreter bovenop WebAssembly, lijkt in eerste instantie compromisloos. Zo gauw de originele Python interpreter STANDAARD in de browser draait, met precies dezelfde privileges als JavaScript, zonder tussenkomst van WebAssembly, is dit de beste oplossing, als tenminste ook de overvloedig beschikbare webgeorienteerde JavaScript libaries kunnen worden gebruikt. Er zijn echter geen tekenen die er op wijzen dat dit ooit gaat gebeuren en een download tijd van minuten is voor de gemiddelde webtoepassing niet acceptabel. De tussenkomst van WebAssembly maakt uitvoering van het programma zelf bovendien trager. Daarnaast is toegang tot de gebruikelijke JavaScript libraries een probleem waardoor het moeilijk is websites te maken die het uiterlijk hebben waar de klant om vraagt.

Blijft over manier 2, de compiler. Ontwerpen is compromissen sluiten en dit is naar mijn mening de optimale compromis. Let wel, ook methode 1 en 3 hebben bestaansrecht, alledrie hebben hun eigen niche. Echter gezien mijn werk op het snijvlak van wetenschap en techniek, maar wel voor echte klanten met echte eisen, gaat mijn voorkeur uit naar deze manier. Wie nog nooit met een compiler heeft gewerkt voelt misschien wat drempelvrees. Daarom springen we gelijk in het diepe en gaan iets maken met behulp van de Transcrypt Python compiler.

In deze les komen 3 voorbeeldprogramma's aan de orde:
Ten eerste het meest simpele voorbeeldprogramma 'hello.py', om vertrouwd te raken met het compilatie proces.
Ten tweede een naar de browser geporte versie van 'pong', om te illustreren dat ons ontwerp uit de vorige les overeind blijft, zelfs als we van de desktop naar de browser gaan.
Ten derde een programma dat grafieken tekent met behulp van de JavaScript PlotLy library, om te laten zien dat willekeurige JavaScript libraries vanuit Python kunnen worden gebruikt.

Daarna is het aan je eigen fantasie: Python in de browser, the sky is the limit.
