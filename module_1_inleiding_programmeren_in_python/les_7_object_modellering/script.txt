Intro
=====

Welkom bij les 7 uit de cursus "Inleiding programmeren in Python",
onderdeel van de WizTech lessenserie.
Deze les gaat over object modellering.
Mijn naam is Jacques de Hooge.

In de voorgaande lessen heb je kennis gemaakt met de kernfaciliteiten van de programmeertaal Python.
Als je zelf steeds dingen hebt uitgeprobeerd en kunt toepassen wat is behandeld, kun je jezelf met recht een beginnend computerprogrammeur noemen.

Een van de leuke dingen van software-ontwikkeling is dat je al doende met heel veel verschillende bedrijfs-takken in contact kunt komen. Het is dan altijd zaak om je in te leven in de wereld van de klant. Wat gebeurt hier in dit bedrijf. Waar zit de kennis. Waar zitten de bottlenecks. Wat zal het management nooit zeggen maar is op de werkvloer gemeengoed. Het eerste wat je in zo'n geval doet is luisteren, lezen en nadenken, analyseren.

Het succes van een project wordt grotendeels bepaald in deze analysefase. Programmeren is een kunst, maar de problemen zitten meestal ergens anders. Hoe kom je te weten wat in een gegeven situatie precies de vereisten, de requirements, zijn. Requirements analyse is een kunst op zich. Bij gebruik van object orientatie spreken we ook wel van OOA, Object Oriented Analysis, of domein-analyse: het maken van een domein model.

Een model is altijd een abstractie van de werkelijkheid. Het beschrijft dat deel van de werkelijkheid dat in de gegeven situatie van belang is. Een natuurkundig model van een auto gaat over snelheid, wegligging en brandstofverbruik, maar niet over kleur, hoeveelheid chroomstrips of invloed op je status.

Object georienteerde analyse houdt in dat je kijkt welke dingen in het toepassingsgebied van belang zijn voor de software. Praat met deskundigen en toekomstige gebruikers, lees je in, en schrijf vervolgens een bondig verhaal over wat je te weten bent gekomen. Leg het voor aan degenen met wie je gepraat hebt en vraag of je hen goed hebt begrepen. Pas het verhaal indien nodig aan.

En dan komt het. Wat er nu volgt lijkt simplistische boekenwijsheid maar het blijkt in de praktijk bijzonder goed te werken:
Onderstreep de zelfstandige naamwoorden die in dit bondige verhaal voorkomen, in het bijzonder degenen die specifiek zijn voor het vakgebied.

(Jeep laten zien)

Als je over auto's praat, gaat het over wielen, motoren, koplampen en het stuur en, misschien, een chauffeur.

Praat je over een wasmachine, dan gaat het over trommels, waterpompen en verwarmingselementen. Praat je over een verzekering, dan gaat het over polissen, rechtspersonen en schadeclaims. etc.

Deze onderstreepte woorden worden je zogenaamde domein-klassen. Definieer voor elk van deze woorden een Python klasse.

(Classes schets laten zien)

Als een auto vier wielen bevat, geef de auto klasse dan vier velden van het type wiel.

(Aanwijzen)

En geef de wielklasse een veld van het type velg en van het type band. Je kunt een auto ook een lijst van wielen geven.

(Aanwijzen)

Houdt ook rekening met specialisatie. Klasse personenwagen erft van auto.

(Aanwijzen, mercedes laten zien)

Klasse vrachtwagen erft ook van auto, maar heeft als extra een laadruimte.

(Aanwijzen, vrachtwagen laten zien)

Zorg steeds dat je geldige Python code (of wat voor taal dan ook) hebt, maar verlies je niet in details. Het gaat erom met minimale inspanning diagrammen te genereren. Dus klassen bevatten soms alleen pass, en als ze al sommige hoofdfuncties bevatten, hebben die aanvankelijk geen parameters en als body ook alleen maar pass. Je gebruikt Python als 't ware alleen maar als specificatietaal om aan inzichtgevende plaatjes te komen.

Je kunt ook vantevoren een eenvoudige schets maken, gewoon met pen en papier.

(Schets lagen zien op scherm)

Maar verlies je niet in allerlei tekentools, de enige die daar beter van wordt zijn de toolfabrikanten.

Wat je nu hebt gecreerd heet een domeinmodel. Het doet nog niets, maar het is een beeldende weergave van het toepassingsdomein, het toepassingsgebied. Niet alle klassen zijn even belangrijk en sommige blijven misschien aanvankelijk leeg. Echter, omdat je niet uit bent gegaan van wat je applicatie (programma) moet doen, maar alleen maar van "over wat voor soort dingen het gaat", is zo'n domein model verbazend stabiel, dat wil zeggen onveranderlijk.

Oude software in auto's gaat misschien over motor-management en nieuwe software over het vermijden van aanrijdingen met voetgangers, maar de meeste personenauto's hebben nog steeds vier wielen en een stuur. Dit houdt in dat software die gebaseerd is op domeinmodel zelden weggegooid hoeft te worden, alleen maar aangepast.

Er kunnen elementen bijkomen, er kunnen elemente afgaan, maar de essentiele structuur blijft behouden. Dat komt omdat niet de veranderlijke wereld van de software, maar de fysieke werkelijkheid als uitgangspunt is genomen. En die verandert niet zo snel.

Een domeinmodel bestaat dus uit domeinobject klassen in hun samenhang, met "has a" (bevat) en "is a" (specialisatie, overerving) relaties, weergegeven door middel van lijntjes.

(Has a en is a arrows erbij in schets)

Let wel, het plaatje IS niet het model. Het maakt het alleen zichtbaar. Het model zelf zit in je hoofd, het is abstract.

Als we op die manier het toepassingsgebied in kaart hebben gebracht, wordt het tijd om vast te leggen wat de applicatie die je voor dat toepassingsgebied gaat maken, precies moet doen. Houd het kort en puntsgewijs: een lijstje van vereisten, requirements. Maak onderscheid tussen zaken van meer en minder belang:

Must have, Should have, Could have, Won't have. Een ezelsbruggetje is het acronym Moscow: Must, Should, Could, Won't. Die laatste is van belang om feature creep, het oeverloos toevoegen van toeters en bellen, te voorkomen.

(Plaatje van Moskou)

Vermeld in je Requirements Specificatie belangrijke dingen eerst en zet bijzaken in een appendix. Laat ook dit verhaal weer lezen aan degenene van wie je de informatie hebt, en vraag feedback.

Pas als je weet wat de eisen zijn, heeft het zin te gaan ontwerpen: Object Oriented Design. Hierbij worden objecten en klassen toegevoegd die niet uit het toepassingdomein komen, maar uit de wereld van de programma libraries, zoals lijsten, vensters en keyboard handlers.

Let daarbij op dat je niet erft van dit soort ontwerpklassen, want dan wordt je programma nodeloos afhankelijk van een bepaalde library. Het is beter dergelijke objecten te verpakken in de domein objecten, in te kapselen: encapsulation. Op die manier zijn ze niet in het interface van de domein objecten zichtbaar en kan gemakkelijk voor een andere library worden gekozen.

Deze techniek, inkapseling van library classes, ligt aan de basis van succesvol object georienteerd ontwerp. Daarom laat ik hiervan een wat uitgebreider voorbeeld zien. Dit voorbeeld gaat over een van de oudste computer games ter wereld: Pong.

Het toepassingsdomein van Pong is tafeltennis.
Hierbij spelen objecten een rol zoals een balletje en batjes.

(Balletje en batjes laten zien)
