//   H O N G K O N G   I N T E R N A T I O N A L   T E R M I N A L S

// __________________________________________________________________________

PROC move (  // Compute linear movement component

   // Out
   REAL    WRITE sActual,
   REAL    WRITE v,
   REAL    WRITE a,
   MARKER  WRITE nHi,

   // In
   INTEGER READ  driveRef,
   MARKER  READ  run,
   MARKER  READ  reverse,
   MARKER  READ  liftBrakes,

   // Const
   REAL    READ  sBufMin,
   REAL    READ  sBufMax,
   REAL    READ  vMax,
   REAL    READ  aMax,
   INTEGER READ  driveRefMax,
   REAL    READ  nHiFrac,

   // Aux
   REAL    WRITE dVMax,
   REAL    WRITE vSetFrac,
   REAL    WRITE vOld
)
BLOCK

   // Compute speed setpoint fraction
   IF run THEN
      vSetFrac = driveRef / float (driveRefMax);
      IF reverse THEN
         vSetFrac = -vSetFrac;
      ENDIF
   ELSE
      vSetFrac = 0;
   ENDIF

   // Compute new speed, retain old value
   vOld = v;
   v = vSetFrac * vMax;

   // Clip speed change
   dVMax = aMax * sweepTime;
   IF v > vOld + dVMax THEN
       v = vOld + dVMax;
   ELSIF v < vOld - dVMax THEN
       v = vOld - dVMax;
   ENDIF

   // Clip speed
   IF v > vMax THEN
       v = vMax;
   ELSIF v < -vMax THEN
       v = -vMax;
   ENDIF

   // Account for braking
   IF !liftBrakes THEN
      v = 0;
   ENDIF

   // Compute new position
   sActual = sActual + v * sweepTime;

   // Account for buffers
   IF (sActual > sBufMax and v > 0) THEN
      v = 0;
      sActual = sBufMax;
   ELSIF (sActual < sBufMin and v < 0) THEN
      v = 0;
      sActual = sBufMin;
   ENDIF

   // Compute accelleration
   a = (v - vOld) / sweepTime;

   // Generate nHi signal
   IF abs (v) > nHiFrac * vMax THEN
      nHi.act;
   ENDIF
ENDBLOCK

// __________________________________________________________________________

PROC sway (  // Compute sway component

   // Out
   REAL    WRITE phi,
   REAL    WRITE omega,

   // In
   REAL    READ  aSusPoint,
   REAL    READ  FWind,
   REAL    READ  vHoist,
   REAL    READ  mSuspended,
   REAL    READ  lRope,

   // Const
   REAL    READ  g,
   REAL    READ  damping,
   REAL    READ  phiTreshold,
   REAL    READ  omegaTreshold,

   // Aux
   REAL    WRITE sinPhi,
   REAL    WRITE cosPhi,
   REAL    WRITE aTangent,
   REAL    WRITE aTanSusPoint,
   REAL    WRITE aTanWind,
   REAL    WRITE aTanGravity,
   REAL    WRITE aTanCoriolis
)
BLOCK

   // Compute terms that contribute to tangential sway accelleration
   aTanSusPoint = -aSusPoint * cosPhi;
   aTanWind     = (FWind / mSuspended) * cosPhi;
   aTanGravity  = -g * sinPhi;
   aTanCoriolis = 2 * vHoist * omega;

   // Compute tangential sway accelleration
   aTangent = aTanSusPoint + aTanWind + aTanGravity + aTanCoriolis;

   // Compute angular sway speed
   omega = omega + aTangent * sweepTime / lRope;

   // Compute sway angle
   phi = (1 - damping * sweepTime) * (phi + omega * sweepTime);

   // Treshold
   IF (abs (omega) < omegaTreshold) and (abs (phi) < phiTreshold) THEN
       omega = 0;
       phi   = 0;
   ENDIF

   // Compute trig. functions in one place as a habit to save processor time
   cosPhi = cos (phi);
   sinPhi = sin (phi);
ENDBLOCK

// __________________________________________________________________________

PROC control (  // Generate controller signals

   // Out
   INTEGER WRITE contRef,
   MARKER  WRITE contNeg,

   // In
   REAL    READ  controller,

   // Const
   INTEGER READ  contRefMax,
   REAL    READ  contMax
)
BLOCK
   contRef = contRefMax * abs (controller) / contMax;
   IF controller < 0 THEN
       contNeg.act;
   ENDIF
ENDBLOCK

// __________________________________________________________________________
